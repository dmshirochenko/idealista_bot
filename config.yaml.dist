---
# Enable verbose mode (print DEBUG log messages)
verbose: true

# Should the bot endlessly looop through the URLs?
# Between each loop it waits for <sleeping_time> seconds.
# Note that Ebay will (temporarily) block your IP if you
# poll too often - don't lower this below 600 seconds if you
# are crawling Ebay.
loop:
    active: yes
    sleeping_time: 60000

# Location of the Database to store already seen offerings
# Defaults to the current directory
database_location: /Users/d.shirochenko/Documents/Python_Code/flathunter

# List the URLs containing your filter properties below.
# Currently supported services: www.immobilienscout24.de,
# www.immowelt.de, www.wg-gesucht.de, and www.ebay-kleinanzeigen.de.
# List the URLs in the following format:
# urls:
#   - https://www.immobilienscout24.de/Suche/
#   - https://www.wg-gesucht.de/

urls:
    - https://www.idealista.com/venta-viviendas/barcelona/eixample/con-precio-hasta_650000/?ordenado-por=fecha-publicacion-desc
#   - https://www.idealista.com/ru/areas/alquiler-viviendas/con-precio-hasta_1300,precio-desde_800,de-un-dormitorio,de-dos-dormitorios,de-tres-dormitorios,ultimas-plantas,plantas-intermedias/?shape=%28%28qfq%7BF_laLaiAcOgdAsoBq%5Bc%5EcSg%7D%40zkBgeDpa%40%7Cj%40cS%7Cx%40zGvdAyCnc%40laBbeCy%60%40bm%40%29%29&ordenado-por=fecha-publicacion-desc
#   - https://www.idealista.com/areas/alquiler-viviendas/con-precio-hasta_1300,de-un-dormitorio,de-dos-dormitorios,de-tres-dormitorios,de-cuatro-cinco-habitaciones-o-mas,plantas-intermedias/?shape=%28%28%7Bgt%7BF%7DxcLk_Akp%40iw%40ekAoQc%7C%40lEyv%40hRwu%40%60l%40eBnr%40a%7B%40rgBtaB%7DOxh%40ec%40%7CfAd%5BjnAy%7D%40tcA%29%29&ordenado-por=fecha-publicacion-desc
#   - https://www.idealista.com/en/alquiler-viviendas/barcelona-barcelona/
#   - https://www.immobilienscout24.de/Suche/de/berlin/berlin/wohnung-mieten?enteredFrom=one_step_search

# Define filters to exclude flats that don't meet your critera.
# Supported filters include 'max_rooms', 'min_rooms', 'max_size', 'min_size',
#   'max_price', 'min_price', and 'excluded_titles'.
#
# 'excluded_titles' takes a list of regex patterns that match against
# the title of the flat. Any matching titles will be excluded.
# More to Python regex here: https://docs.python.org/3/library/re.html
#
# Example:
# filters:
#   excluded_titles:
#     - "wg"
#     - "zwischenmiete"
#   min_price: 700
#   max_price: 1000
#   min_size: 50
#   max_size: 80
#   max_price_per_square: 1000
#filters:

# There are often city districts in the address which
# Google Maps does not like. Use this blacklist to remove
# districts from the search.
#blacklist:
#  - Innenstadt

# If an expose includes an address, the bot is capable of
# displaying the distance and time to travel (duration) to
# some configured other addresses, for specific kinds of
# travel.
#
# Available kinds of travel ('gm_id') can be found in the
# Google Maps API documentation, but basically there are:
# 	- "bicycling"
#	- "transit" (public transport)
#	- "driving"
#   - "walking"
#
# The example configuration below includes a place for
# "John", located at the main train station of munich.
# Two kinds of travel (bicycle and transit) are requested,
# each with a different label. Furthermore a place for
# "Jane" is included, located at the given destination and
# with the same kinds of travel.


#durations:
#    - name: John
#      destination: Hauptbahnhof, München
#      modes:
#          - gm_id: transit
#            title: "Öff."
#          - gm_id: bicycling
#            title: "Rad"
#    - name: Jane
#      destination: Karlsplatz, München
#      modes:
#          - gm_id: transit
#            title: "Öff."
#          - gm_id: driving
#          title: "Auto"


# Multiline message (yes, the | is supposed to be there),
# to format the message received from the Telegram bot.
#
# Available placeholders:
# 	- {title}: The title of the expose
#	- {rooms}: Number of rooms
#	- {price}: Price for the flat
# 	- {durations}: Durations calculated by GMaps, see above
#	- {url}: URL to the expose
message: |
    {title}
    Rooms: {rooms}
    Size: {size}
    Price: {price}
    Address: {address}

    {url}

# Calculating durations requires access to the Google Maps API.
# Below you can configure the URL to access the API, with placeholders.
# The URL should most probably just kept like that.
# To use the Google Maps API, an API key is required. You can obtain one
# without costs from the Google App Console (just google for it).
# Additionally, to enable the API calls in the code, set the 'enable' key to True

#google_maps_api:
#    key: YOUR_API_KEY
#    url: https://maps.googleapis.com/maps/api/distancematrix/json?origins={origin}&destinations={dest}&mode={mode}&sensor=true&key={key}&arrival_time={arrival}
#    enable: False

# Register at 2captcha and enter your API key below. you will also
# have to install a Chrome Web Driver and write below the path to
# the executable.
#captcha:
#  api_key: 
#  driver_arguments:
#    - "--headless"
#  driver_path: /opt/homebrew/bin/chromedriver

#scraperapi.com
scraperapi:
  api_key: 

# You can select whether to be notified by telegram or via a mattermost
# webhook. For all notifiers selected here a configuration must be provided
# below.
# notifiers:
#   - telegram
#   - mattermost
notifiers:
    - telegram


# Sending messages using Telegram requires a Telegram Bot configured.
# Telegram.org offers a good documentation about how to create a bot.
# Once you read it, will make sense. Still: bot_token should hold the
# access token of your bot and receiver_ids should list the client ids
# of receivers. Note that those receivers are required to already have
# started a conversation with your bot.


telegram:
  bot_token: 
  receiver_ids:
      - 


# Sending messages via mattermost requires a webhook url provided by a
# mattermost server. You can find a description how to set up a webhook with
# the official mattermost documentation:
# https://docs.mattermost.com/developer/webhooks-incoming.html
# mattermost:
#   webhook_url: https://mattermost.example.com/signup_user_complete/?id=abcdef12356

# If you are running the web interface, you can configure Login with Telegram support
# Follow the instructions here to register your domain with the Telegram bot:
# https://core.telegram.org/widgets/login
#
website:
  bot_name: bot_name_xxx
  domain: flathunter.example.com
  session_key: SomeSecretValue
  listen:
    host: 127.0.0.1
    port: 8080



# If you are deploying to google cloud,
# uncomment this and set it to your project id. More info in the readme.
#google_cloud_project_id: round-runner-345222

# For websites like idealista.it, there are anti-crawler measures that can be
# circumvented using proxies.
#use_proxy_list: True
